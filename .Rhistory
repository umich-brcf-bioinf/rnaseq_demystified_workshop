keep <- rowSums(counts(dds)) >= 1
dds <- dds[keep,]
#Hidden code block to write out data for knitting
save.image(file = "RunningData.RData")
library(DESeq2)
load("RunningData.RData")
rld <- rlog(dds, blind = TRUE)
head(assay(rld), 3)
# Apply model
dds <- DESeq(dds)
resultsNames(dds) #only includes pairwise comparison to specified control as default but other inforamtion is stored in object so can generate additional comparisons
dds_patient <- DESeq(dds_patient)
resultsNames(dds_patient)
#Hidden code block to write out data for knitting
save.image(file = "RunningData.RData")
sessionInfo()
library(DESeq2)
load("RunningData.RData")
rld <- rlog(dds, blind = TRUE)
head(assay(rld), 3)
# Apply model
dds <- DESeq(dds)
resultsNames(dds) #only includes pairwise comparison to specified control as default but other inforamtion is stored in object so can generate additional comparisons
dds_patient <- DESeq(dds_patient)
resultsNames(dds_patient)
#Hidden code block to write out data for knitting
save.image(file = "RunningData.RData")
sessionInfo()
library(DESeq2)
library(ggplot2)
library(tidyr)
library(dplyr)
library(matrixStats)
library('ggrepel', character.only=TRUE)
library('pheatmap', character.only=TRUE)
library('RColorBrewer', character.only=TRUE)
load("RunningData.RData")
# system("mkdir ./Figures") # create output folder if not already generated
# system("mkdir ./Figures/BySamples") # create output folder if not already generated
plotPath = "./Figures/BySamples/"
## setup for raw counts
pdata = data.frame(colData(dds))
mat = as.matrix(assay(dds))
title = 'Raw counts'
y_label = 'log2(counts)'
# create annotationn table for raw plots
annot_df = data.frame(
sample = row.names(pdata),
Group = factor(pdata[, "condition"]),
row.names = row.names(pdata),
stringsAsFactors = F
)
# join counts and annotation table
tidy_mat = tidyr::gather(as_tibble(mat), key = 'sample', value = 'counts') %>%
left_join(annot_df, by = 'sample')
box_plot = ggplot(tidy_mat, aes(x = sample, y = log2(counts), fill = Group)) +
geom_boxplot(notch = TRUE) +
labs(
title = title,
x = '',
y = y_label) +
theme_bw() + theme(axis.text.x = element_text(angle = 90))
ggsave(filename = paste0(plotPath, "BoxPlot_Mov10_raw.pdf"), plot = box_plot, height = 8, width = 8, dpi = 300)
## rlog counts
pdata = data.frame(colData(rld))
mat = as.matrix(assay(rld))
title = 'Rlog normalized counts'
y_label = 'rlog(counts)'
annot_df = data.frame(
sample = row.names(pdata),
Group = factor(pdata[, "condition"]),
row.names = row.names(pdata),
stringsAsFactors = F
)
tidy_mat = tidyr::gather(as_tibble(mat), key = 'sample', value = 'counts') %>%
left_join(annot_df, by = 'sample')
box_plot = ggplot(tidy_mat, aes(x = sample, y = counts, fill = Group)) +
geom_boxplot(notch = TRUE) +
labs(
title = title,
x = '',
y = y_label) +
theme_bw() + theme(axis.text.x = element_text(angle = 90))
ggsave(filename = paste0(plotPath, "BoxPlot_Mov10_rlog.pdf"), plot = box_plot, height = 8, width = 8, dpi = 300)
#heatmap with top 500 variant or expressed genes, rlog normalized data
colors <- colorRampPalette(brewer.pal(9, 'Blues'))(255)
select <- order(rowMeans(assay(rld)), decreasing=TRUE)[1:500]
df <- data.frame(Group = colData(rld)[,c('condition')], row.names = rownames(colData(dds)))
pdf(file = paste0(plotPath,'Heatmap_TopExp_', Comparison, '.pdf'), onefile = FALSE, width=10, height=20)
pdf(file = paste0(plotPath,'Heatmap_TopExp_.pdf'), onefile = FALSE, width=10, height=20)
p <- pheatmap(assay(rld)[select,], scale="row",  cluster_rows=TRUE, show_rownames=FALSE, cluster_cols=TRUE, annotation_col=df, fontsize = 7, las = 2, fontsize_row = 7, color = colors, main = '500 Top Expressed Genes Heatmap')
p
dev.off()
pdf(file = paste0(plotPath,'Heatmap_TopExp_.pdf'), onefile = FALSE, width=10, height=20)
p <- pheatmap(assay(rld)[select,], scale="row",  cluster_rows=TRUE, show_rownames=FALSE, cluster_cols=TRUE, annotation_col=df, fontsize = 7, las = 2, fontsize_row = 7, color = colors, main = '500 Top Expressed Genes Heatmap')
p
dev.off()
dev.off()
pdf(file = paste0(plotPath,'Heatmap_TopExp_', Comparison, '.pdf'), onefile = FALSE, width=10, height=20)
Comparison <- "Mov10"
pdf(file = paste0(plotPath,'Heatmap_TopExp_', Comparison, '.pdf'), onefile = FALSE, width=10, height=20)
p <- pheatmap(assay(rld)[select,], scale="row",  cluster_rows=TRUE, show_rownames=FALSE, cluster_cols=TRUE, annotation_col=df, fontsize = 7, las = 2, fontsize_row = 7, color = colors, main = '500 Top Expressed Genes Heatmap')
p
p
dev.off()
#heatmap of normalized data, sample distibution matrix
sampleDists <- dist(t(assay(rld))) #rld
sampleDistMatrix <- as.matrix(sampleDists) # convert to matrix
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette(rev(brewer.pal(9, 'Blues')))(255)
pdf(file = paste0(plotPath,'Heatmap_Dispersions_', Comparison, '.pdf'), onefile = FALSE)
p <- pheatmap(sampleDistMatrix,
clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,
col=colors)
p
dev.off()
colors <- colorRampPalette(brewer.pal(9, 'Blues'))(255)
select <- order(rowVars(assay(rld)), decreasing=TRUE)[1:500]
df <- data.frame(Group = colData(rld)[,c('condition')], row.names = rownames(colData(dds)))
pdf(file = paste0(plotPath,'Heatmap_TopVar_', Comparison, '.pdf'), onefile = FALSE, width=10, height=20)
pheatmap(assay(rld)[select,], scale="row",  cluster_rows=TRUE, show_rownames=FALSE, cluster_cols=TRUE, annotation_col=df, fontsize = 7, las = 2, fontsize_row = 7, color = colors, main = '500 Top Variably Expressed Genes Heatmap')
dev.off()
pdf(file = paste0(plotPath, 'PCAplot_rlog_', Comparison, '.pdf'), onefile = TRUE)
#PCA plot for Rlog-Normalized counts for all samples
CombinatoricGroup <- factor(meta$condition)
SampleName <- factor(row.names(meta))
p.all <- plotPCA(rld, intgroup = c('condition'), ntop = 500)
gp <- ggplot(p.all$data, aes(x = PC1, y = PC2, color = SampleName, shape = CombinatoricGroup)) + xlab(p.all$labels[2]) + ylab(p.all$labels[1]) + scale_shape_manual(values=1:nlevels(CombinatoricGroup), name = 'Combinatoric Group') + geom_point(size=2) + ggtitle(label = as.character('All samples Rlog-Normalized')) + theme(plot.title = element_text(hjust = 0.5)) + guides(colour=guide_legend(nrow=12, title = 'Sample'), legend.key = element_rect(size = 1), legend.key.size = unit(0, 'cm')) + theme_classic(base_size = 10) + theme(legend.margin=margin(t = 0, unit='mm'))
plot(gp)
dev.off()
# generate PCA loadings
pca <- prcomp(t(assay(rld)), scale=TRUE)
## get the scree information
pca.var <- pca$sdev^2
scree <- pca.var/sum(pca.var)
barplot((scree[1:10]*100), main="Scree Plot", xlab="Principal Component", ylab="Percent Variation")
pdf(file = paste0(plotPath, 'PCAplot_raw_', Comparison, '.pdf'), onefile = TRUE)
#PCA for Raw counts for all samples
RC <- SummarizedExperiment(log2(counts(dds, normalized = FALSE)), colData=colData(dds))
p.RC <- plotPCA(DESeqTransform(RC), intgroup = 'condition')
gpRC <- ggplot(p.RC$data, aes(x = PC1, y = PC2, color = SampleName, shape = CombinatoricGroup)) + xlab(p.RC$labels[2]) + ylab(p.RC$labels[1]) + scale_shape_manual(values=1:nlevels(CombinatoricGroup), name = 'Combinatoric Group') + geom_point(size=2) + ggtitle(label = as.character('All samples Raw')) + theme(plot.title = element_text(hjust = 0.5)) + guides(colour=guide_legend(nrow=12, title = 'Sample'), legend.key = element_rect(size = 1), legend.key.size = unit(0, 'cm')) + theme_classic(base_size = 10) + theme(legend.margin=margin(t = 0, unit='mm'))
plot(gpRC)
dev.off()
# embedd example of plot (rlog only)
plot(gp)
#Hidden code block to write out data for knitting
save.image(file = "RunningData.RData")
sessionInfo()
#Hidden code block to write out data for knitting
save.image(file = "RunningData.RData")
library(DESeq2)
library(tidyr)
library(dplyr)
load("RunningData.RData")
plotDispEsts(dds)
resultsNames(dds)
Comparison <- "condition_Mov.KD_vs_Irrel"
res.KD <- results(dds, name=Comparison)
Comparison <- "condition_Mov.OE_vs_Irrel"
res.OE <- results(dds, name=Comparison)
?results
res <- results(dds, contrast=c("condition", "Mov.OE", "Mov.KD"))
head(res)
head(res.KD)
#Hidden code block to write out data for knitting
save.image(file = "RunningData.RData")
sessionInfo()
library(DESeq2)
library(ggplot2)
library(tidyr)
library(dplyr)
library('ggrepel', character.only=TRUE)
library('pheatmap', character.only=TRUE)
library('RColorBrewer', character.only=TRUE)
load("RunningData.RData")
fc <- 1.5
pval <- 0.05
df<- res.KD[order(res.KD$padj),] #select our data of interest
df <- as.data.frame(df) #convert our object type
df <- cbind("id" = row.names(df), df) #set rownames to valid column
str(df)
comparison <- "Mov10.KD_vs_Irrel"
rm(comparison)
fc <- 1.5
pval <- 0.05
df<- res.KD[order(res.KD$padj),] #select our data of interest
df <- as.data.frame(df) #convert our object type
df <- cbind("id" = row.names(df), df) #set rownames to valid column
str(df)
Comparison <- "Mov10.KD_vs_Irrel"
df$dot <- rep(3, nrow(df))
df$dot[which(df$padj <= pval & df$log2FoldChange < 0 & abs(df$log2FoldChange) >= log2(fc))] = 2
df$dot[which(df$padj <= pval & df$log2FoldChange > 0 & abs(df$log2FoldChange) >= log2(fc))] = 1
df$sig <- df$dot
#take top 5 up, down, then combine, assign label
top <- rbind(head(subset(df, df$dot == 1), 5),head(subset(df, df$dot == 2), 5))
top$label <- top$id
df <- merge(x = df, y = top[,c('id','label')], by = "id", all.x = TRUE)
#count the number of significan up and down genes, assign value for legend
df$dot <- factor(df$dot,levels = c(1,2,3), labels = c(paste0('Up: ', sum(df$dot == 1)),paste0('Down: ', sum(df$dot == 2)),'NS'))
pdf(file = paste0(plotPath,'VolcanoPlot_', Comparison, '.pdf'), onefile = FALSE)
p <- ggplot(df, aes(x = log2FoldChange, y = -log10(padj))) + geom_point(aes(color = df$dot), size = 1) + theme_classic() + xlab('Log2 fold-change') + ylab('-Log10 adjusted p-value')
p <- p + scale_color_manual(name = '', values=c('#B31B21', '#1465AC', 'darkgray'))
p <- p + geom_vline(xintercept = c(0, -log2(fc), log2(fc)), linetype = c(1, 2, 2), color = c('black', 'black', 'black')) + geom_hline(yintercept = -log10(pval), linetype = 2, color = 'black')
if (sum(is.na(df$label)) < nrow(df)) {
p <- p + geom_label_repel(label = df$label, force = 3, segment.alpha = 0.4) + ggtitle(as.character(comparison))
} else {
p <- p + ggtitle(as.character(comparison))
}
pdf(file = paste0(plotPath,'VolcanoPlot_', Comparison, '.pdf'), onefile = FALSE)
p <- ggplot(df, aes(x = log2FoldChange, y = -log10(padj))) + geom_point(aes(color = df$dot), size = 1) + theme_classic() + xlab('Log2 fold-change') + ylab('-Log10 adjusted p-value')
p <- p + scale_color_manual(name = '', values=c('#B31B21', '#1465AC', 'darkgray'))
p <- p + geom_vline(xintercept = c(0, -log2(fc), log2(fc)), linetype = c(1, 2, 2), color = c('black', 'black', 'black')) + geom_hline(yintercept = -log10(pval), linetype = 2, color = 'black')
if (sum(is.na(df$label)) < nrow(df)) {
p <- p + geom_label_repel(label = df$label, force = 3, segment.alpha = 0.4) + ggtitle(as.character(Comparison))
} else {
p <- p + ggtitle(as.character(comparison))
}
print(p)
dev.off()
p
pdf(file = paste0(plotPath,'VolcanoPlot_', Comparison, '.pdf'), onefile = FALSE)
p <- ggplot(df, aes(x = log2FoldChange, y = -log10(padj))) + geom_point(aes(color = df$dot), size = 1) + theme_classic() + xlab('Log2 fold-change') + ylab('-Log10 adjusted p-value')
p <- p + scale_color_manual(name = '', values=c('#B31B21', '#1465AC', 'darkgray'))
p <- p + geom_vline(xintercept = c(0, -log2(fc), log2(fc)), linetype = c(1, 2, 2), color = c('black', 'black', 'black')) + geom_hline(yintercept = -log10(pval), linetype = 2, color = 'black')
if (sum(is.na(df$label)) < nrow(df)) {
p <- p + geom_label_repel(label = df$label, force = 3, segment.alpha = 0.4) + ggtitle(as.character(Comparison))
} else {
p <- p + ggtitle(as.character(comparison))
}
print(p)
dev.off()
p
head(dds)
?rep
#add new column
res.KD$Call <- rep(FALSE, length(res.KD$baseMean))
length(res.KD[(res.KD$padj < 0.05 & abs(res.KD$log2FoldChange) >= log2(1.5)), ]$Call)
res.KD[(res.KD$padj < 0.05 & abs(res.KD$log2FoldChange) >= log2(1.5)), ]
length(na.omit(res.KD[(res.KD$padj < 0.05 & abs(res.KD$log2FoldChange) >= log2(1.5)), ]$Call))
res.KD_sig <- na.omit(res.KD)
res.KD_sig <- res.KD_sig[which(res.KD_sig$padj < 0.05 & abs(res.KD_sig$log2FoldChange) >= log2(1.5)), ]
head(res.KD_sig)
Comparison <- "condition_Mov.KD_vs_Irrel"
res.KD <- results(dds, name=Comparison)
res.KD_sig <- na.omit(res.KD)
res.KD_sig <- res.KD_sig[which(res.KD_sig$padj < 0.05 & abs(res.KD_sig$log2FoldChange) >= log2(1.5)), ]
head(res.KD_sig)
na.omit(res.KD[which(res.KD$padj < 0.05 & abs(res.KD$log2FoldChange) >= log2(1.5)), ])
#summary(res.KD)
sum(res.KD$padj < 0.05 & abs(res.KD$log2FoldChange) >= log2(1.5), na.rm = TRUE)
res.KD_anno[which(na.omit(res.KD$padj < 0.05) & abs(res.KD$log2FoldChange) >= log2(1.5)), ])
res.KD_anno[which(na.omit(res.KD$padj < 0.05) & abs(res.KD$log2FoldChange) >= log2(1.5)), ]
res.KD_anno <- res.KD # copy table
res.KD_anno[which(na.omit(res.KD_anno$padj < 0.05) & abs(res.KD_anno$log2FoldChange) >= log2(1.5)), ]
res.KD_anno[which(na.omit(res.KD_anno$padj) < 0.05 & abs(res.KD_anno$log2FoldChange) >= log2(1.5)), ]
#summary(res.KD)
sum(res.KD$padj < 0.05 & abs(res.KD$log2FoldChange) >= log2(1.5), na.rm = TRUE)
res.KD_anno <- res.KD # copy table
res.KD_anno$Call <- rep(FALSE, length(res.KD$baseMean)) # add a column and assign all genes are non-significance
res.KD_anno[which(na.omit(res.KD_anno$padj) < 0.05 & abs(res.KD_anno$log2FoldChange) >= log2(1.5)), ]
res.KD_anno[which(na.omit(res.KD_anno$padj) < 0.05 && abs(res.KD_anno$log2FoldChange) >= log2(1.5)), ]
?na.omit
is.na()
?is.na
res.KD_anno[which(!is.na(res.KD_anno$padj) & res.KD_anno$padj < 0.05 & abs(res.KD_anno$log2FoldChange) >= log2(1.5)), ]
# change 'Call' column to TRUE if meets conditions for significant differences
res.KD_anno[which(!is.na(res.KD_anno$padj) & res.KD_anno$padj < 0.05 & abs(res.KD_anno$log2FoldChange) >= log2(1.5)), ]$Call <- TRUE
res.KD_anno[order(res.KD_anno$Call),]
res.KD_anno[order(-res.KD_anno$Call),]
# reorder table to rank significant genes at the top
res.KD_anno <- res.KD_anno[order(-res.KD_anno$Call),]
library(DESeq2)
load("RunningData.RData")
data <- read.table("./data/Mov10_full_counts.txt", header = TRUE, row.names = 1)
head(data)
#OR str(data)
colnames(data)
meta <- data.frame("samples"=colnames(data))
meta
meta$condition <- factor(c(rep(c("Mov.KD"), 2), rep(c("Mov.OE"), 3), rep(c("Irrel"), 3)), levels = c("Irrel","Mov.KD", "Mov.OE")) ## levels = c(Case, Control); Control should be last if only two groups.
row.names(meta) # check the row names
row.names(meta) <- meta$samples # set the row names to be the sample names
meta$samples <- NULL # clear the sample name column since isnt needed
all(colnames(data) %in% rownames(meta)) #OR?
all(colnames(data) == rownames(meta))
## Create DESeq object, line by line
dds <- DESeqDataSetFromMatrix(countData = data,
colData = meta,
design = ~ condition)
meta
meta$patient <- factor(c("P1", "P2", "P1", "P2", "P3", "P1", "P2", "P3"), levels = c("P1", "P2", "P3"))
dds_patient <- DESeqDataSetFromMatrix(countData = data,
colData = meta,
design = ~ patient + condition)
keep <- rowSums(counts(dds)) >= 1
dds <- dds[keep,]
#Hidden code block to write out data for knitting
save.image(file = "RunningData.RData")
#Hidden code block to write out data for knitting
save.image(file = "RunningData.RData")
sessionInfo()
library(DESeq2)
library(ggplot2)
library(tidyr)
library(dplyr)
library(matrixStats)
library('ggrepel', character.only=TRUE)
library('pheatmap', character.only=TRUE)
library('RColorBrewer', character.only=TRUE)
load("RunningData.RData")
# system("mkdir ./Figures") # create output folder if not already generated
# system("mkdir ./Figures/BySamples") # create output folder if not already generated
plotPath = "./Figures/BySamples/"
## setup for raw counts
pdata <- data.frame(colData(dds))
mat <- as.matrix(assay(dds))
title <- 'Raw counts'
y_label <- 'log2(counts)'
Comparison <- "Mov10"
# create annotationn table for raw plots
annot_df = data.frame(
sample = row.names(pdata),
Group = factor(pdata[, "condition"]),
row.names = row.names(pdata),
stringsAsFactors = F
)
# join counts and annotation table
tidy_mat = tidyr::gather(as_tibble(mat), key = 'sample', value = 'counts') %>%
left_join(annot_df, by = 'sample')
box_plot = ggplot(tidy_mat, aes(x = sample, y = log2(counts), fill = Group)) +
geom_boxplot(notch = TRUE) +
labs(
title = title,
x = '',
y = y_label) +
theme_bw() + theme(axis.text.x = element_text(angle = 90))
ggsave(filename = paste0(plotPath, "BoxPlot_Mov10_raw.pdf"), plot = box_plot, height = 8, width = 8, dpi = 300)
## rlog counts
pdata = data.frame(colData(rld))
mat = as.matrix(assay(rld))
title = 'Rlog normalized counts'
y_label = 'rlog(counts)'
annot_df = data.frame(
sample = row.names(pdata),
Group = factor(pdata[, "condition"]),
row.names = row.names(pdata),
stringsAsFactors = F
)
tidy_mat = tidyr::gather(as_tibble(mat), key = 'sample', value = 'counts') %>%
left_join(annot_df, by = 'sample')
box_plot = ggplot(tidy_mat, aes(x = sample, y = counts, fill = Group)) +
geom_boxplot(notch = TRUE) +
labs(
title = title,
x = '',
y = y_label) +
theme_bw() + theme(axis.text.x = element_text(angle = 90))
ggsave(filename = paste0(plotPath, "BoxPlot_Mov10_rlog.pdf"), plot = box_plot, height = 8, width = 8, dpi = 300)
#heatmap with top 500 variant or expressed genes, rlog normalized data
colors <- colorRampPalette(brewer.pal(9, 'Blues'))(255)
select <- order(rowMeans(assay(rld)), decreasing=TRUE)[1:500]
df <- data.frame(Group = colData(rld)[,c('condition')], row.names = rownames(colData(dds)))
pdf(file = paste0(plotPath,'Heatmap_TopExp_', Comparison, '.pdf'), onefile = FALSE, width=10, height=20)
p <- pheatmap(assay(rld)[select,], scale="row",  cluster_rows=TRUE, show_rownames=FALSE, cluster_cols=TRUE, annotation_col=df, fontsize = 7, las = 2, fontsize_row = 7, color = colors, main = '500 Top Expressed Genes Heatmap')
p
dev.off()
pdf(file = paste0(plotPath,'Heatmap_TopExp_', Comparison, '.pdf'), onefile = FALSE, width=10, height=20)
p <- pheatmap(assay(rld)[select,], scale="row",  cluster_rows=TRUE, show_rownames=FALSE, cluster_cols=TRUE, annotation_col=df, fontsize = 7, las = 2, fontsize_row = 7, color = colors, main = '500 Top Expressed Genes Heatmap')
p
dev.off()
#heatmap of normalized data, sample distibution matrix
sampleDists <- dist(t(assay(rld))) #rld
sampleDistMatrix <- as.matrix(sampleDists) # convert to matrix
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette(rev(brewer.pal(9, 'Blues')))(255)
pdf(file = paste0(plotPath,'Heatmap_Dispersions_', Comparison, '.pdf'), onefile = FALSE)
p <- pheatmap(sampleDistMatrix,
clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,
col=colors)
p
dev.off()
colors <- colorRampPalette(brewer.pal(9, 'Blues'))(255)
select <- order(rowVars(assay(rld)), decreasing=TRUE)[1:500]
df <- data.frame(Group = colData(rld)[,c('condition')], row.names = rownames(colData(dds)))
pdf(file = paste0(plotPath,'Heatmap_TopVar_', Comparison, '.pdf'), onefile = FALSE, width=10, height=20)
pheatmap(assay(rld)[select,], scale="row",  cluster_rows=TRUE, show_rownames=FALSE, cluster_cols=TRUE, annotation_col=df, fontsize = 7, las = 2, fontsize_row = 7, color = colors, main = '500 Top Variably Expressed Genes Heatmap')
dev.off()
pdf(file = paste0(plotPath, 'PCAplot_rlog_', Comparison, '.pdf'), onefile = TRUE)
#PCA plot for Rlog-Normalized counts for all samples
CombinatoricGroup <- factor(meta$condition)
SampleName <- factor(row.names(meta))
p.all <- plotPCA(rld, intgroup = c('condition'), ntop = 500)
gp <- ggplot(p.all$data, aes(x = PC1, y = PC2, color = SampleName, shape = CombinatoricGroup)) + xlab(p.all$labels[2]) + ylab(p.all$labels[1]) + scale_shape_manual(values=1:nlevels(CombinatoricGroup), name = 'Combinatoric Group') + geom_point(size=2) + ggtitle(label = as.character('All samples Rlog-Normalized')) + theme(plot.title = element_text(hjust = 0.5)) + guides(colour=guide_legend(nrow=12, title = 'Sample'), legend.key = element_rect(size = 1), legend.key.size = unit(0, 'cm')) + theme_classic(base_size = 10) + theme(legend.margin=margin(t = 0, unit='mm'))
plot(gp)
dev.off()
# generate PCA loadings
pca <- prcomp(t(assay(rld)), scale=TRUE)
## get the scree information
pca.var <- pca$sdev^2
scree <- pca.var/sum(pca.var)
barplot((scree[1:10]*100), main="Scree Plot", xlab="Principal Component", ylab="Percent Variation")
pdf(file = paste0(plotPath, 'PCAplot_raw_', Comparison, '.pdf'), onefile = TRUE)
#PCA for Raw counts for all samples
RC <- SummarizedExperiment(log2(counts(dds, normalized = FALSE)), colData=colData(dds))
p.RC <- plotPCA(DESeqTransform(RC), intgroup = 'condition')
gpRC <- ggplot(p.RC$data, aes(x = PC1, y = PC2, color = SampleName, shape = CombinatoricGroup)) + xlab(p.RC$labels[2]) + ylab(p.RC$labels[1]) + scale_shape_manual(values=1:nlevels(CombinatoricGroup), name = 'Combinatoric Group') + geom_point(size=2) + ggtitle(label = as.character('All samples Raw')) + theme(plot.title = element_text(hjust = 0.5)) + guides(colour=guide_legend(nrow=12, title = 'Sample'), legend.key = element_rect(size = 1), legend.key.size = unit(0, 'cm')) + theme_classic(base_size = 10) + theme(legend.margin=margin(t = 0, unit='mm'))
plot(gpRC)
dev.off()
# embedd example of plot (rlog only)
plot(gp)
#Hidden code block to write out data for knitting
save.image(file = "RunningData.RData")
sessionInfo()
library(DESeq2)
library(tidyr)
library(dplyr)
load("RunningData.RData")
plotDispEsts(dds)
res.KD_anno[ ,c(1:6)]
head(GeneKey)
GeneKey <- getBM(attributes=c('ensembl_gene_id', 'hgnc_symbol', "description"),
filters = 'hgnc_symbol',
values = row.names(assay(dds)),
mart = ensembl)
library("biomaRt")
ensembl <- useMart("ensembl",dataset="hsapiens_gene_ensembl")
GeneKey <- getBM(attributes=c('ensembl_gene_id', 'hgnc_symbol', "description"),
filters = 'hgnc_symbol',
values = row.names(assay(dds)),
mart = ensembl)
head(GeneKey)
res.KD_anno <- res.KD # copy table
res.KD_anno <- cbind(genes=row.names(res.KD_anno), res.KD_anno[ ,c(1:6)])
res.KD_anno <- as.data.frame(res.KD_anno)
merge(GeneKey, res.KD_anno, by.x = "hgnc_symbol", by.y="genes", all.x = FALSE, all.y = TRUE)
head(res.KD_anno)
res.KD_anno <- merge(GeneKey, res.KD_anno, by.x = "hgnc_symbol", by.y="genes", all.x = FALSE, all.y = TRUE) # combine the two tables using the merge function
head(res.KD_anno)
#Hidden code block to write out data for knitting
save.image(file = "RunningData_Full.RData")
sum(res.KD$padj < 0.05, na.rm = TRUE)
dir.create("./OutputTables")
write.csv(counts(dds, normalized = FALSE), file="./OutputTables/DESeq2_raw_counts.csv")
write.csv(assay(rld), file="./OutputTables/DESeq2_rlogNormalized_counts.csv")
library(DESeq2)
library(ggplot2)
library(tidyr)
library(dplyr)
library('ggrepel', character.only=TRUE)
library('pheatmap', character.only=TRUE)
library('RColorBrewer', character.only=TRUE)
load("RunningData.RData")
fc <- 1.5
pval <- 0.05
df<- res.KD[order(res.KD$padj),] #select our data of interest
df <- as.data.frame(df) #convert our object type
df <- cbind("id" = row.names(df), df) #set rownames to valid column
str(df)
Comparison <- "Mov10.KD_vs_Irrel"
df$dot <- rep(3, nrow(df))
df$dot[which(df$padj <= pval & df$log2FoldChange < 0 & abs(df$log2FoldChange) >= log2(fc))] = 2
df$dot[which(df$padj <= pval & df$log2FoldChange > 0 & abs(df$log2FoldChange) >= log2(fc))] = 1
df$sig <- df$dot
#take top 5 up, down, then combine, assign label
top <- rbind(head(subset(df, df$dot == 1), 5),head(subset(df, df$dot == 2), 5))
top$label <- top$id
df <- merge(x = df, y = top[,c('id','label')], by = "id", all.x = TRUE)
#count the number of significan up and down genes, assign value for legend
df$dot <- factor(df$dot,levels = c(1,2,3), labels = c(paste0('Up: ', sum(df$dot == 1)),paste0('Down: ', sum(df$dot == 2)),'NS'))
pdf(file = paste0(plotPath,'VolcanoPlot_', Comparison, '.pdf'), onefile = FALSE)
p <- ggplot(df, aes(x = log2FoldChange, y = -log10(padj))) + geom_point(aes(color = df$dot), size = 1) + theme_classic() + xlab('Log2 fold-change') + ylab('-Log10 adjusted p-value')
p <- p + scale_color_manual(name = '', values=c('#B31B21', '#1465AC', 'darkgray'))
p <- p + geom_vline(xintercept = c(0, -log2(fc), log2(fc)), linetype = c(1, 2, 2), color = c('black', 'black', 'black')) + geom_hline(yintercept = -log10(pval), linetype = 2, color = 'black')
if (sum(is.na(df$label)) < nrow(df)) {
p <- p + geom_label_repel(label = df$label, force = 3, segment.alpha = 0.4) + ggtitle(as.character(Comparison))
} else {
p <- p + ggtitle(as.character(comparison))
}
print(p)
dev.off()
p
#summary(res.KD)
sum(res.KD$padj < 0.05 & abs(res.KD$log2FoldChange) >= log2(1.5), na.rm = TRUE)
sum(res.OE$padj < 0.05 & abs(res.OE$log2FoldChange) >= log2(1.5), na.rm = TRUE)
library("biomaRt")
ensembl <- useMart("ensembl",dataset="hsapiens_gene_ensembl")
head(listFilters(mart = ensembl))
head(listAttributes(ensembl))
GeneKey <- getBM(attributes=c('ensembl_gene_id', 'hgnc_symbol', "description"),
filters = 'hgnc_symbol',
values = row.names(assay(dds)),
mart = ensembl) # will take some time to run
head(GeneKey)
res.KD_anno <- res.KD # copy table
res.KD_anno <- cbind(genes=row.names(res.KD_anno), res.KD_anno[ ,c(1:6)])
res.KD_anno <- as.data.frame(res.KD_anno)
res.KD_anno <- merge(GeneKey, res.KD_anno, by.x = "hgnc_symbol", by.y="genes", all.x = FALSE, all.y = TRUE) # combine the two tables using the merge function
head(res.KD_anno)
dir.create("./OutputTables")
write.csv(counts(dds, normalized = FALSE), file="./OutputTables/DESeq2_raw_counts.csv")
write.csv(assay(rld), file="./OutputTables/DESeq2_rlogNormalized_counts.csv")
write.csv(res.KD_anno,
row.names = FALSE,
na = ".",
file="./OutputTables/Mov10.KD_vs_Irrel_DESeq2.csv")
sum(res.KD$padj < 0.05, na.rm = TRUE)
#Hidden code block to write out data for knitting
save.image(file = "RunningData_Full.RData")
sessionInfo()
